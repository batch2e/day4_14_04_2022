int ===> datatype
var====> variable

  int ====> we cannot write only the datatype. Alongwith the datatype we need to have variables also.

  int num; 


  class Customer{} ===> datatype like int. But int is a primitive type and class is of reference type.

  So we cannot work with the class until unless we create the object of a class.

 
  class Customer {}


Customer cust=new Customer();

 // Customer cust; // We created a reference variable whose type is Customer
// cust=new Customer(); // new Customer() is creating a new object during runtime and the address of this object is stored in the reference variable.
 

int *ptr;
int num=10;
ptr=&num;

// ptr is a pointer which is storing the address of an int variable called num.

----------------------------------------------------------------------------------------------------------
  
Whenever we are creating a class , a class will have attributes/instance variables/properties and 
methods/behaviour

 class ClassName {
    
   // attributes

   // methods
  }

---------------------------------------------------------------------------------------------------------------
Customer purchasing Item. 

class Customer {
 private String custId;
 private String customerName;
 private String mobileNumber;
 private String address;   

// whenever we are writing methods we write return type of the method and method name and the list of //parameters. In the following methods we dont have any parameters.
// setData is a method which is currently used to store the values for the attributes 
void setData() {
   // setting the value
  Scanner scan=new Scanner(System.in);
  System.out.println("Enter the custId");
  custId=scan.next();
  System.out.println("Enter the customer name");
  customerName=scan.next();
  System.out.println("Enter the mobile number");
  mobileNumber=scan.next();
  System.out.println("Enter the address");
  address=scan.next();
 }

// displayData is over displaying the value for the attributes
 void displayData(){
   // displaying the value
   System.out.println(custId);
   System.out.println(customerName);
 } 

}

Q Why we should have multiple methods ?
A We should have modular approach and the method should do one task at a time. 
So that it makes debugging easy and easy to test code. 


Customer cust1=new Customer();
Customer cust2=new Customer();

class Item {
  private String itemId;
  private String itemName;
  private int qoh;
  private int price;  
}

// We create a separate class to have the main method only

class Purchase {
         

} 


Q Why we require a main method?
A Main method is entry point for the execution of the java code

class Main {
  public static void main(String args[]){
   {
    Customer cust1=new Customer();
    Customer cust2=new Customer();
     cust1.setData();
     cust2.setData();
     cust1.displayData();
     cust2.displayData();
     Item item1=new Item();
     Item item2=new Item();
   }
}

--------------------------------------------------------------------------------------------------------------
You want to show a demo to a group about class and object? So what are basic things required.

class Xyz{
int attribute1;
String attribute2;
int attribute3;

void method1() {}

void method2() {}

}


class Main {
   public static void main(String str[]){
   Xyz x=new Xyz();
   x.method1();
   x.method2();

  }
}

If we are writing multiple classes , in the same file we cannot make all the classes as public. 
We make the class which is having the main method as public.

So example.

   CustomerMain.java

   class Customer{}
   class CustomerMain{}
------------------------------------------------------------------------------------------------------------  
Customer.java

  import java.util.Scanner;

class Customer {
  private int id;
  private String name;
  private String address;
  
public void setData() {
	  Scanner scan=new Scanner(System.in);
	  System.out.println("Enter the id");
	  id=scan.nextInt();
	  System.out.println("Enter the name");
	  name=scan.next();
	  System.out.println("Enter the address");
	  address=scan.next(); 
	  
}

  public void displayData() {
  System.out.println(id);
  System.out.println(name);
  System.out.println(address);
}
  
}

public class CustomerMain{
  public static void main(String args[])
  {
	 Customer cust=new Customer();
	 cust.displayData();// default values are shown , for int it will be 0 and for String it will be null
	 cust.setData();
	 cust.displayData();
	  
  }
}


int ===> 0
float ===> 0.0
object===> null
default value is the value which is used for automatic initialisation of the members which writing any 
code for initialisation.

-------------------------------------------------
To rename a class , right click on the class name in package explorer===> Refractor ====> rename



import java.util.Scanner;

class Customer {
  private int id;
  private String name;
  private String address;
  public void setData() {
	  Scanner scan=new Scanner(System.in);
	  System.out.println("Enter the id");
	  id=scan.nextInt();
	  System.out.println("Enter the name");
	  name=scan.next();
	  System.out.println("Enter the address");
	  address=scan.next(); 
}
  public void displayData() {
  System.out.println(id);
  System.out.println(name);
  System.out.println(address);
}
 
}

public class CustomerMain{
	
  public static void main(String args[])
  {
	 Customer cust=new Customer();
	 cust.displayData();// default values are shown , for int it will be 0 and for String it will be null
	 cust.setData();
	 cust.displayData();
	  
	
  }
}
So we should either say cust is an object of Customer type.
cust is a reference variable which is storing the address of a newly created object. 
Customer cust=new Customer();
The object is getting created in the RHS of the expression.
-------------------------------------------------------------------------------------------------------
Q While using the Scanner class we wrote import statement but while writing our code with Food and Tester,
In the Tester class we are not writing any import statement for Food. So what is the reason?
A both Tester and Food classes are in the same package which is in default one. That is the reason
we need not mention any import statement for Food.
---------------------------------------------------------------------------------------------------------------

// id,name and address in Customer1 class are the member variables
// instance variables of the Customer1 class and hence they 
// are accessible by all the methods of the same class.
// But id,name and address mentioned within the main method
// are local variables to the main method
// local variables are those variables which are defined
// within the scope of a method
// In the setData method the parameters like i,nm and add 
// are local variables.
// i,nm and add cannot be accessed by other methods like displayData
// because they are local to the setData method.
public class Customer1 {
  private int id;
  private String name;
  private String address;

  public void setData(int i, String nm, String add) {
   id=i;
   name=nm;
   address=add;
	
}
  public void displayData() {
  System.out.println(id);
  System.out.println(name);
  System.out.println(address);
}
 
}


import java.util.Scanner;
public class CustomerMain1{
	
  public static void main(String args[])
  {
	 Customer1 cust=new Customer1();
         Scanner sc=new Scanner(System.in);
         System.out.println("Enter the id for the customer");
         int id=sc.nextInt();
         System.out.println("Enter the name for the customer");
         String name=sc.next();
   	 System.out.println("Enter the address for the customer");
         String address=sc.next();
         cust.setData(id,name,address);  // we are passsing the arguments to the setData method
	 cust.displayData();
	  
	
  }
}
------------------------------------------------------------------------
Design two classes one is Calculator and another is Calculator main. Calculator class will have
two variables and 4 methods like add , subtract, divide , multiply.

public class Calculator{

void setData(int n1, int n2){
   num1=n1;
   num2=n2;
}

 //add()
 //subtract()
 //divide()
 //multiply()
}

public class CalculatorMain{

  public static void main(String args[]){
   Calculator calc=new Calculator();
   calc.setData(10,5);
   System.out.println("The value of adding numbers"+result);
   System.out.println("The value after subtracting one number from other"+result);
   // display for multiply and divide also
 }

}
---------------------------------------------------------------------------------------------------
Create two Student objects and assign the following data. Dont use user inputs.
attributes as roll,name,marks1(float),marks2(float),grade

For student1
Enter roll number
1
Enter name 
Akash
Enter marks1
 70
Enter marks2
 80
   

For student2
Enter roll number
2
Enter name 
Suresh
Enter marks1
50
Enter marks2
60


The details are
roll 1
name Akash
marks1 70
marks2 80
grade  B

roll 2
name Suresh
marks1 50
marks2 60
grade  C

Grade will be calculated based on the average score. If average score is above 80 or equal to 80 grade as A
if average is greater than or equal to 70 and less than 80 have the grade as B
otherwise C

public class Student {
private int roll;
private String name;
private float marks1;
private float marks2;
private char grade;

void setData(int r,String n, float m1, float m2){
roll=r;
name=n;
marks1=m1;
marks2=m2;
}

void decideGrade(){
  float avg=(marks1+marks2)/2;
  grade=(avg>=80)?'A':(avg>=70)?'B':'C';
 }

void displayData(){
System.out.println("roll "+roll);
System.out.println("name "+name);
System.out.println("marks1 "+marks1);
System.out.println("marks2 "+marks2);
System.out.println("grade "+grade);
}

}


public class StudentMain{
 public static void main(String args[]){
   Student student1=new Student();
   student1.setData(1,"Akash",70,80);
   student1.decideGrade();
   student1.displayData(); 

   Student student2=new Student();
   student2.setData(2,"Suresh",50,60);
   student2.decideGrade();
   student2.displayData();
 }
}

---------------------------------------------------------------------------------------------------------

public class Student {
private int roll;
private String name;
private float marks1;
private float marks2;
private char grade;

void setData(int r,String n, float m1, float m2){
roll=r;
name=n;
marks1=m1;
marks2=m2;
}

private char decideGrade(){
  float avg=(marks1+marks2)/2;
  char gr=(avg>=80)?'A':(avg>=70)?'B':'C';
  return gr; 
}

/* private void decideGrade(){
  float avg=(marks1+marks2)/2;
  grade=(avg>=80)?'A':(avg>=70)?'B':'C';
  System.out.println("grade "+grade);  
} */

void displayData(){
System.out.println("roll "+roll);
System.out.println("name "+name);
System.out.println("marks1 "+marks1);
System.out.println("marks2 "+marks2);
grade=decideGrade();
//decideGrade();
System.out.println("grade "+grade);
}

}



public class StudentMain{
 public static void main(String args[]){
   Student student1=new Student();
   student1.setData(1,"Akash",70,80);
   student1.displayData(); 

   Student student2=new Student();
   student2.setData(2,"Suresh",50,60);
   student2.displayData();
 }
}
---------------------------------------------------------------------------------------------------------
Constructors
* Constructors are used to initialise member variables and so ultimately initialising objects.
* Constructors are having the same name as that of the class name.
* Constructors are methods.
* With constructor we dont write any return type.
* We can have two types of cosntructor - 1)default/parameterless 2) parameterized constructor

public class Numbers1{
   private int num1;
   private int num2;
  
   void setData(int n1, int n2){
    num1=n1;
    num2=n2;
   }

   void dispData(){
   System.out.println(num1);
   System.out.println(num2);
   }
 }

public class NumbersMain1 {
   public static void main(String args[]){
      Numbers1 number=new Numbers1();  // Number1() is a parmeterless/default constructor
      number.dispData();  // 0 0
      number.setData(3,4);
      number.dispData();  // 3 4
    }
 } 
  
Q How the member variables are getting the default value as 0?
A because of the constructor. Though currently in our code , we have not defined any constructor but
  during the compilation time , the code is provided with the default constructor.

----------------------------------------------------------------------------------------------------
Q Can we define our own default or parameterless constructor?
A Yes

public class Numbers2{
   private int num1;
   private int num2;
  // The below is the parameterless constructor
   Numbers2(){
    num1=1;
    num2=2;
   }

   void setData(int n1, int n2){
    num1=n1;
    num2=n2;
   }

   void dispData(){
   System.out.println(num1);
   System.out.println(num2);
   }
 }

public class NumbersMain2 {
   public static void main(String args[]){
      Numbers2 number=new Numbers2();  // Number2() is a parmeterless/default constructor
      number.dispData();  // 1 2
      number.setData(3,4);
      number.dispData();  // 3 4
    }
 } 
  
------------------------------------------------------------------------------------------------

 Q What about parameterized constructor?
 A 

public class Numbers3{
   private int num1;
   private int num2;
  // The below is the parameter constructor
   Numbers3(int n1,int n2){
    num1=n1;
    num2=n2;
   }

   void setData(int n1, int n2){
    num1=n1;
    num2=n2;
   }

   void dispData(){
   System.out.println(num1);
   System.out.println(num2);
   }
 }

public class NumbersMain3 {
   public static void main(String args[]){
      Numbers3 number=new Numbers3(1,2);  // Number2(1,2) is a parmeterized constructor
      number.dispData();  // 1 2
      number.setData(3,4);
      number.dispData();  // 3 4
    }
 } 
 
-------------------------------------------------------------------------------------------------------
Q Can we have both parameterless and parameterized constructor in the same class.
A Yes we can have. In the below example while creation of number1 , parameterless constructor is invoked
and while creation of number2 parameterized constructor is invoked.


public class Numbers4{
   private int num1;
   private int num2;
  // The below is the parameterless constructor
  Numbers4(){
   num1=1;
   num2=2;
  }
  // The below is the parameterized constructor
   Numbers4(int n1,int n2){
    num1=n1;
    num2=n2;
   }

   void setData(int n1, int n2){
    num1=n1;
    num2=n2;
   }

   void dispData(){
   System.out.println(num1);
   System.out.println(num2);
   }
 }

public class NumbersMain4 {
   public static void main(String args[]){
      Numbers4 number1=new Numbers4();  // Number4() is a parmeterless constructor
      Numbers4 number2=new Numbers4(3,4); // Number4(int,int) is a parameterized constructor
      number1.dispData();  // 1 2 
      number1.setData(100,200);
      number1.dispData();  //100 200
      number2.dispData();  // 3 4 
      number2.setData(300,400);
      number2.dispData();  //300 400
   
    }
 } 
--------------------------------------------------------------------------------------------------------
We can have one parameterless constructor and we can have multiple parameterized constructors. But those
multiple parameterized constructor should have different numbers of parameter or different datatypes.

public class Numbers5 {
   private int num1;
   private int num2;
   private float f1;
   private float f2;

  Numbers5(){
    num1=1;
    num2=2;
    f1=12.34f;
    f2=12.345f;
  }

 Numbers5(int n1,int n2, float ff1, float ff2){
    num1=n1;
    num2=n2;
    f1=ff1;
    f2=ff2;
   }

  Numbers5(int n1,int n2){
   num1=n1;
   num2=n2;
  }

  Numbers5(float ff1, float ff2){
   f1=ff1;
   f2=ff2;
  }

  Numbers5(int n1, float ff1){
   num1=n1;
   f2=ff1;
  }

/* Numbers5(int nn1,int nn2){
  num1=nn1;
  num2=nn2; 
} */
}

public class NumbersMain5{
  public static void main(String args[]) {
     Numbers5 number1=new Numbers5();
     Numbers5 number2=new Numbers5(1,2);
     Numbers5 number3=new Numbers5(1.2f,3.4f);
     Numbers5 number4=new Numbers(1,3,2.35f,4.5f);
   }
}
 
